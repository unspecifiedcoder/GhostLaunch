/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "AuditorManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuditorManager__factory>;
    getContractFactory(
      name: "EncryptedERC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EncryptedERC__factory>;
    getContractFactory(
      name: "EncryptedUserBalances",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EncryptedUserBalances__factory>;
    getContractFactory(
      name: "IDO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDO__factory>;
    getContractFactory(
      name: "IEncryptedERC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEncryptedERC__factory>;
    getContractFactory(
      name: "IRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistrar__factory>;
    getContractFactory(
      name: "IBurnVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnVerifier__factory>;
    getContractFactory(
      name: "IMintVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintVerifier__factory>;
    getContractFactory(
      name: "IRegistrationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistrationVerifier__factory>;
    getContractFactory(
      name: "ITransferVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferVerifier__factory>;
    getContractFactory(
      name: "IWithdrawVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawVerifier__factory>;
    getContractFactory(
      name: "BabyJubJub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BabyJubJub__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "BurnVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnVerifier__factory>;
    getContractFactory(
      name: "MintVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintVerifier__factory>;
    getContractFactory(
      name: "RegistrationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistrationVerifier__factory>;
    getContractFactory(
      name: "TransferVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferVerifier__factory>;
    getContractFactory(
      name: "WithdrawVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawVerifier__factory>;
    getContractFactory(
      name: "ProjectToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProjectToken__factory>;
    getContractFactory(
      name: "Registrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registrar__factory>;
    getContractFactory(
      name: "FeeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeERC20__factory>;
    getContractFactory(
      name: "SimpleERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleERC20__factory>;
    getContractFactory(
      name: "TokenTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenTracker__factory>;
    getContractFactory(
      name: "BurnCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnCircuitGroth16Verifier__factory>;
    getContractFactory(
      name: "MintCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintCircuitGroth16Verifier__factory>;
    getContractFactory(
      name: "RegistrationCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistrationCircuitGroth16Verifier__factory>;
    getContractFactory(
      name: "TransferCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferCircuitGroth16Verifier__factory>;
    getContractFactory(
      name: "WithdrawCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawCircuitGroth16Verifier__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC1363",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "AuditorManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AuditorManager>;
    getContractAt(
      name: "EncryptedERC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EncryptedERC>;
    getContractAt(
      name: "EncryptedUserBalances",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EncryptedUserBalances>;
    getContractAt(
      name: "IDO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDO>;
    getContractAt(
      name: "IEncryptedERC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEncryptedERC>;
    getContractAt(
      name: "IRegistrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistrar>;
    getContractAt(
      name: "IBurnVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBurnVerifier>;
    getContractAt(
      name: "IMintVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintVerifier>;
    getContractAt(
      name: "IRegistrationVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistrationVerifier>;
    getContractAt(
      name: "ITransferVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferVerifier>;
    getContractAt(
      name: "IWithdrawVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawVerifier>;
    getContractAt(
      name: "BabyJubJub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BabyJubJub>;
    getContractAt(
      name: "Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "BurnVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnVerifier>;
    getContractAt(
      name: "MintVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintVerifier>;
    getContractAt(
      name: "RegistrationVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistrationVerifier>;
    getContractAt(
      name: "TransferVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferVerifier>;
    getContractAt(
      name: "WithdrawVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawVerifier>;
    getContractAt(
      name: "ProjectToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProjectToken>;
    getContractAt(
      name: "Registrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Registrar>;
    getContractAt(
      name: "FeeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeERC20>;
    getContractAt(
      name: "SimpleERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleERC20>;
    getContractAt(
      name: "TokenTracker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenTracker>;
    getContractAt(
      name: "BurnCircuitGroth16Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnCircuitGroth16Verifier>;
    getContractAt(
      name: "MintCircuitGroth16Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintCircuitGroth16Verifier>;
    getContractAt(
      name: "RegistrationCircuitGroth16Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistrationCircuitGroth16Verifier>;
    getContractAt(
      name: "TransferCircuitGroth16Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferCircuitGroth16Verifier>;
    getContractAt(
      name: "WithdrawCircuitGroth16Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawCircuitGroth16Verifier>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AuditorManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuditorManager>;
    deployContract(
      name: "EncryptedERC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC>;
    deployContract(
      name: "EncryptedUserBalances",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedUserBalances>;
    deployContract(
      name: "IDO",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDO>;
    deployContract(
      name: "IEncryptedERC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEncryptedERC>;
    deployContract(
      name: "IRegistrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistrar>;
    deployContract(
      name: "IBurnVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBurnVerifier>;
    deployContract(
      name: "IMintVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintVerifier>;
    deployContract(
      name: "IRegistrationVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistrationVerifier>;
    deployContract(
      name: "ITransferVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransferVerifier>;
    deployContract(
      name: "IWithdrawVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawVerifier>;
    deployContract(
      name: "BabyJubJub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BabyJubJub>;
    deployContract(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "BurnVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnVerifier>;
    deployContract(
      name: "MintVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintVerifier>;
    deployContract(
      name: "RegistrationVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistrationVerifier>;
    deployContract(
      name: "TransferVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferVerifier>;
    deployContract(
      name: "WithdrawVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawVerifier>;
    deployContract(
      name: "ProjectToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProjectToken>;
    deployContract(
      name: "Registrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registrar>;
    deployContract(
      name: "FeeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeERC20>;
    deployContract(
      name: "SimpleERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleERC20>;
    deployContract(
      name: "TokenTracker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenTracker>;
    deployContract(
      name: "BurnCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnCircuitGroth16Verifier>;
    deployContract(
      name: "MintCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintCircuitGroth16Verifier>;
    deployContract(
      name: "RegistrationCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistrationCircuitGroth16Verifier>;
    deployContract(
      name: "TransferCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferCircuitGroth16Verifier>;
    deployContract(
      name: "WithdrawCircuitGroth16Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawCircuitGroth16Verifier>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1363",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "AuditorManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuditorManager>;
    deployContract(
      name: "EncryptedERC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC>;
    deployContract(
      name: "EncryptedUserBalances",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedUserBalances>;
    deployContract(
      name: "IDO",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDO>;
    deployContract(
      name: "IEncryptedERC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEncryptedERC>;
    deployContract(
      name: "IRegistrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistrar>;
    deployContract(
      name: "IBurnVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBurnVerifier>;
    deployContract(
      name: "IMintVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintVerifier>;
    deployContract(
      name: "IRegistrationVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistrationVerifier>;
    deployContract(
      name: "ITransferVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransferVerifier>;
    deployContract(
      name: "IWithdrawVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawVerifier>;
    deployContract(
      name: "BabyJubJub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BabyJubJub>;
    deployContract(
      name: "Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "BurnVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnVerifier>;
    deployContract(
      name: "MintVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintVerifier>;
    deployContract(
      name: "RegistrationVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistrationVerifier>;
    deployContract(
      name: "TransferVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferVerifier>;
    deployContract(
      name: "WithdrawVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawVerifier>;
    deployContract(
      name: "ProjectToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProjectToken>;
    deployContract(
      name: "Registrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registrar>;
    deployContract(
      name: "FeeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeERC20>;
    deployContract(
      name: "SimpleERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleERC20>;
    deployContract(
      name: "TokenTracker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenTracker>;
    deployContract(
      name: "BurnCircuitGroth16Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnCircuitGroth16Verifier>;
    deployContract(
      name: "MintCircuitGroth16Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintCircuitGroth16Verifier>;
    deployContract(
      name: "RegistrationCircuitGroth16Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistrationCircuitGroth16Verifier>;
    deployContract(
      name: "TransferCircuitGroth16Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferCircuitGroth16Verifier>;
    deployContract(
      name: "WithdrawCircuitGroth16Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawCircuitGroth16Verifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
