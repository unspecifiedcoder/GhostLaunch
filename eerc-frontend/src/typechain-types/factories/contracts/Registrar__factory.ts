/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Registrar, RegistrarInterface } from "../../contracts/Registrar";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registrationVerifier_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidChainId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRegistrationHash",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [],
    name: "UserAlreadyRegistered",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Point",
        name: "publicKey",
        type: "tuple",
      },
    ],
    name: "Register",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserPublicKey",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "publicKey",
        type: "uint256[2]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "registrationHash",
        type: "uint256",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isUserRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct ProofPoints",
            name: "proofPoints",
            type: "tuple",
          },
          {
            internalType: "uint256[5]",
            name: "publicSignals",
            type: "uint256[5]",
          },
        ],
        internalType: "struct RegisterProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registrationVerifier",
    outputs: [
      {
        internalType: "contract IRegistrationVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "userPublicKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610785380380610785833981016040819052602c916050565b600080546001600160a01b0319166001600160a01b0392909216919091179055607e565b600060208284031215606157600080fd5b81516001600160a01b0381168114607757600080fd5b9392505050565b6106f88061008d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806311231fe014610067578063163f75221461009057806337729b5c146100b35780634cd1f470146100c8578063579a69881461010457806392d05a8514610127575b600080fd5b61007a61007536600461054c565b610152565b604051610087919061059f565b60405180910390f35b6100a361009e36600461054c565b610192565b6040519015158152602001610087565b6100c66100c13660046105ad565b6101da565b005b6100ef6100d636600461054c565b6001602081905260009182526040909120805491015482565b60408051928352602083019190915201610087565b6100a36101123660046105c9565b60026020526000908152604090205460ff1681565b60005461013a906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b61015a61052e565b506040805180820182526001600160a01b03909216600081815260016020818152938220805486529290915280835201549082015290565b6001600160a01b038116600090815260016020526040812054158015906101d457506001600160a01b0382166000908152600160208190526040909120015415155b92915050565b6040805160a08181019092526000916101008401906005908390839080828437600092019190915250505060408101519091506001600160a01b038116331461023657604051636edaef2f60e11b815260040160405180910390fd5b6060820151461461025a57604051633d23e4d160e11b815260040160405180910390fd5b60808201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061029f57604051638c45c0ad60e01b815260040160405180910390fd5b60008181526002602052604090205460ff1680156102c157506102c182610192565b156102df57604051634f2532fb60e11b815260040160405180910390fd5b6102e88461033a565b6103348260405180604001604052808660006005811061030a5761030a6105e2565b6020020151815260200186600160058110610327576103276105e2565b60200201519052836104b0565b50505050565b6040805180820182526000918390600290839083908082843760009201829052506040805180820182529495509093925085019050600283835b828210156103b25760408051808201825290808402860190600290839083908082843760009201919091525050508152600190910190602001610374565b5050604080518082018252939450600093925060c087019150600290839083908082843760009201829052506040805160a081810190925294955090939250610100880191506005908390839080828437600092018290525080546040516334baeab960e01b815294955090936001600160a01b0390911692506334baeab9915061044790889088908890889060040161061b565b602060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048891906106a0565b9050806104a8576040516309bde33960e01b815260040160405180910390fd5b505050505050565b6001600160a01b0383166000818152600160208181526040808420875181558783018051918501919091558685526002835293819020805460ff19169093179092558151865181529251908301527fa29f706235c83d457380cf21ecc4ba909fa846879eea28d1b12e4e3b82aa7590910160405180910390a2505050565b60405180604001604052806002906020820280368337509192915050565b60006020828403121561055e57600080fd5b81356001600160a01b038116811461057557600080fd5b9392505050565b8060005b6002811015610334578151845260209384019390910190600101610580565b604081016101d4828461057c565b60006101a08284031280156105c157600080fd5b509092915050565b6000602082840312156105db57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b8060005b60058110156103345781518452602093840193909101906001016105fc565b6101a0810161062a828761057c565b604082018560005b60028110156106795781518360005b6002811015610660578251825260209283019290910190600101610641565b5050506040929092019160209190910190600101610632565b50505061068960c083018561057c565b6106976101008301846105f8565b95945050505050565b6000602082840312156106b257600080fd5b8151801515811461057557600080fdfea2646970667358221220c01405b0a16d17b3a56d7820a792f3c3fc4e93b490832a349e5626300e40d32864736f6c634300081b0033";

type RegistrarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistrarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registrar__factory extends ContractFactory {
  constructor(...args: RegistrarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    registrationVerifier_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(registrationVerifier_, overrides || {});
  }
  override deploy(
    registrationVerifier_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(registrationVerifier_, overrides || {}) as Promise<
      Registrar & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Registrar__factory {
    return super.connect(runner) as Registrar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistrarInterface {
    return new Interface(_abi) as RegistrarInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Registrar {
    return new Contract(address, _abi, runner) as unknown as Registrar;
  }
}
