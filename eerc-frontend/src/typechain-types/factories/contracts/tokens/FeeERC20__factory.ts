/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  FeeERC20,
  FeeERC20Interface,
} from "../../../contracts/tokens/FeeERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimal",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "feeRates",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "feeCollectors",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "FaucetClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "FAUCET_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FAUCET_COOLDOWN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "canClaimFromFaucet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimFromFaucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals_",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeCollector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNextFaucetClaimTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastFaucetClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dea380380610dea83398101604081905261002f9161014e565b848484828260036100408382610284565b50600461004d8282610284565b50506005805460ff191660ff9390931692909217909155505050600791909155600880546001600160a01b0319166001600160a01b0390921691909117905550610342915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100bc57600080fd5b81516001600160401b038111156100d5576100d5610095565b604051601f8201601f19908116603f011681016001600160401b038111828210171561010357610103610095565b60405281815283820160200185101561011b57600080fd5b60005b8281101561013a5760208186018101518383018201520161011e565b506000918101602001919091529392505050565b600080600080600060a0868803121561016657600080fd5b85516001600160401b0381111561017c57600080fd5b610188888289016100ab565b602088015190965090506001600160401b038111156101a657600080fd5b6101b2888289016100ab565b945050604086015160ff811681146101c957600080fd5b6060870151608088015191945092506001600160a01b03811681146101ed57600080fd5b809150509295509295909350565b600181811c9082168061020f57607f821691505b60208210810361022f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561027f57806000526020600020601f840160051c8101602085101561025c5750805b601f840160051c820191505b8181101561027c5760008155600101610268565b50505b505050565b81516001600160401b0381111561029d5761029d610095565b6102b1816102ab84546101fb565b84610235565b6020601f8211600181146102e557600083156102cd5750848201515b600019600385901b1c1916600184901b17845561027c565b600084815260208120601f198516915b8281101561031557878501518255602094850194600190920191016102f5565b50848210156103335786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b610a99806103516000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637d1d5d19116100ad578063c415b95c11610071578063c415b95c14610254578063dd62ed3e1461027f578063efc10bc4146102b8578063f785ef72146102cb578063fbbfb782146102d857600080fd5b80637d1d5d19146102065780638a8772051461021057806395d89b4114610230578063978bbdb914610238578063a9059cbb1461024157600080fd5b8063313ce567116100f4578063313ce5671461018c57806340c10f19146101a557806370a08231146101ba57806376697640146101e35780637a8ec795146101f357600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102e0565b60405161013b919061088e565b60405180910390f35b6101576101523660046108f8565b610372565b604051901515815260200161013b565b6002545b60405190815260200161013b565b610157610187366004610922565b61038c565b60055460ff165b60405160ff909116815260200161013b565b6101b86101b33660046108f8565b6103ff565b005b61016b6101c836600461095f565b6001600160a01b031660009081526020819052604090205490565b61016b683635c9adc5dea0000081565b61016b61020136600461095f565b61040d565b61016b6201518081565b61016b61021e36600461095f565b60066020526000908152604090205481565b61012e610434565b61016b60075481565b61015761024f3660046108f8565b610443565b600854610267906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61016b61028d366004610981565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101576102c636600461095f565b610451565b6005546101939060ff1681565b6101b8610481565b6060600380546102ef906109b4565b80601f016020809104026020016040519081016040528092919081815260200182805461031b906109b4565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b5050505050905090565b600033610380818585610569565b60019150505b92915050565b60008033905060006064600754856103a49190610a04565b6103ae9190610a1b565b905060006103bc8286610a3d565b90506103c987848761057b565b6103d48787836105fa565b81156103f2576008546103f29088906001600160a01b0316846105fa565b5060019695505050505050565b6104098282610659565b5050565b6001600160a01b038116600090815260066020526040812054610386906201518090610a50565b6060600480546102ef906109b4565b6000336103808185856105fa565b6001600160a01b038116600090815260066020526040812054610478906201518090610a50565b42101592915050565b3360009081526006602052604090205461049f906201518090610a50565b4210156104ff5760405162461bcd60e51b815260206004820152602360248201527f4661756365743a20436f6f6c646f776e20706572696f64206e6f7420656c61706044820152621cd95960ea1b60648201526084015b60405180910390fd5b33600081815260066020526040902042905561052490683635c9adc5dea00000610659565b60408051683635c9adc5dea00000815242602082015233917fa19a7d2b5bf6a987a66e0eac8a6eb2dbd34ae6a43285849af788b224268ec022910160405180910390a2565b610576838383600161068f565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156105f457818110156105e557604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016104f6565b6105f48484848403600061068f565b50505050565b6001600160a01b03831661062457604051634b637e8f60e11b8152600060048201526024016104f6565b6001600160a01b03821661064e5760405163ec442f0560e01b8152600060048201526024016104f6565b610576838383610764565b6001600160a01b0382166106835760405163ec442f0560e01b8152600060048201526024016104f6565b61040960008383610764565b6001600160a01b0384166106b95760405163e602df0560e01b8152600060048201526024016104f6565b6001600160a01b0383166106e357604051634a1406b160e11b8152600060048201526024016104f6565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156105f457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161075691815260200190565b60405180910390a350505050565b6001600160a01b03831661078f5780600260008282546107849190610a50565b909155506108019050565b6001600160a01b038316600090815260208190526040902054818110156107e25760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016104f6565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661081d5760028054829003905561083c565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161088191815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156108bc576020818601810151604086840101520161089f565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146108f357600080fd5b919050565b6000806040838503121561090b57600080fd5b610914836108dc565b946020939093013593505050565b60008060006060848603121561093757600080fd5b610940846108dc565b925061094e602085016108dc565b929592945050506040919091013590565b60006020828403121561097157600080fd5b61097a826108dc565b9392505050565b6000806040838503121561099457600080fd5b61099d836108dc565b91506109ab602084016108dc565b90509250929050565b600181811c908216806109c857607f821691505b6020821081036109e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610386576103866109ee565b600082610a3857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610386576103866109ee565b80820180821115610386576103866109ee56fea2646970667358221220fb4bf0bbd9fa4bbf182526a4bebc026dc8f22d2f354381b81a4a1982b40b6edd64736f6c634300081b0033";

type FeeERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeERC20__factory extends ContractFactory {
  constructor(...args: FeeERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    feeRates: BigNumberish,
    feeCollectors: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      decimal,
      feeRates,
      feeCollectors,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    feeRates: BigNumberish,
    feeCollectors: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      decimal,
      feeRates,
      feeCollectors,
      overrides || {}
    ) as Promise<
      FeeERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FeeERC20__factory {
    return super.connect(runner) as FeeERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeERC20Interface {
    return new Interface(_abi) as FeeERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): FeeERC20 {
    return new Contract(address, _abi, runner) as unknown as FeeERC20;
  }
}
