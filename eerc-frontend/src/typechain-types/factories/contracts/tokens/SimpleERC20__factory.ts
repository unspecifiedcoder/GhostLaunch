/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SimpleERC20,
  SimpleERC20Interface,
} from "../../../contracts/tokens/SimpleERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimal",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "FaucetClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "FAUCET_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FAUCET_COOLDOWN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "canClaimFromFaucet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimFromFaucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals_",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNextFaucetClaimTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastFaucetClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ca8380380610ca883398101604081905261002f91610123565b8282600361003d838261022f565b50600461004a828261022f565b50506005805460ff191660ff9390931692909217909155506102ed915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009157600080fd5b81516001600160401b038111156100aa576100aa61006a565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d8576100d861006a565b6040528181528382016020018510156100f057600080fd5b60005b8281101561010f576020818601810151838301820152016100f3565b506000918101602001919091529392505050565b60008060006060848603121561013857600080fd5b83516001600160401b0381111561014e57600080fd5b61015a86828701610080565b602086015190945090506001600160401b0381111561017857600080fd5b61018486828701610080565b925050604084015160ff8116811461019b57600080fd5b809150509250925092565b600181811c908216806101ba57607f821691505b6020821081036101da57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561022a57806000526020600020601f840160051c810160208510156102075750805b601f840160051c820191505b818110156102275760008155600101610213565b50505b505050565b81516001600160401b038111156102485761024861006a565b61025c8161025684546101a6565b846101e0565b6020601f82116001811461029057600083156102785750848201515b600019600385901b1c1916600184901b178455610227565b600084815260208120601f198516915b828110156102c057878501518255602094850194600190920191016102a0565b50848210156102de5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6109ac806102fc6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80637a8ec795116100a2578063a9059cbb11610071578063a9059cbb14610222578063dd62ed3e14610235578063efc10bc41461026e578063f785ef7214610281578063fbbfb7821461028e57600080fd5b80637a8ec795146101dd5780637d1d5d19146101f05780638a877205146101fa57806395d89b411461021a57600080fd5b8063313ce567116100de578063313ce5671461017657806340c10f191461018f57806370a08231146101a457806376697640146101cd57600080fd5b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015157806323b872dd14610163575b600080fd5b610118610296565b60405161012591906107f5565b60405180910390f35b61014161013c36600461085f565b610328565b6040519015158152602001610125565b6002545b604051908152602001610125565b610141610171366004610889565b610342565b60055460ff165b60405160ff9091168152602001610125565b6101a261019d36600461085f565b610366565b005b6101556101b23660046108c6565b6001600160a01b031660009081526020819052604090205490565b610155683635c9adc5dea0000081565b6101556101eb3660046108c6565b610374565b6101556201518081565b6101556102083660046108c6565b60066020526000908152604090205481565b61011861039b565b61014161023036600461085f565b6103aa565b6101556102433660046108e8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61014161027c3660046108c6565b6103b8565b60055461017d9060ff1681565b6101a26103e8565b6060600380546102a59061091b565b80601f01602080910402602001604051908101604052809291908181526020018280546102d19061091b565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b5050505050905090565b6000336103368185856104d0565b60019150505b92915050565b6000336103508582856104e2565b61035b858585610561565b506001949350505050565b61037082826105c0565b5050565b6001600160a01b03811660009081526006602052604081205461033c906201518090610955565b6060600480546102a59061091b565b600033610336818585610561565b6001600160a01b0381166000908152600660205260408120546103df906201518090610955565b42101592915050565b33600090815260066020526040902054610406906201518090610955565b4210156104665760405162461bcd60e51b815260206004820152602360248201527f4661756365743a20436f6f6c646f776e20706572696f64206e6f7420656c61706044820152621cd95960ea1b60648201526084015b60405180910390fd5b33600081815260066020526040902042905561048b90683635c9adc5dea000006105c0565b60408051683635c9adc5dea00000815242602082015233917fa19a7d2b5bf6a987a66e0eac8a6eb2dbd34ae6a43285849af788b224268ec022910160405180910390a2565b6104dd83838360016105f6565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561055b578181101561054c57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161045d565b61055b848484840360006105f6565b50505050565b6001600160a01b03831661058b57604051634b637e8f60e11b81526000600482015260240161045d565b6001600160a01b0382166105b55760405163ec442f0560e01b81526000600482015260240161045d565b6104dd8383836106cb565b6001600160a01b0382166105ea5760405163ec442f0560e01b81526000600482015260240161045d565b610370600083836106cb565b6001600160a01b0384166106205760405163e602df0560e01b81526000600482015260240161045d565b6001600160a01b03831661064a57604051634a1406b160e11b81526000600482015260240161045d565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561055b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106bd91815260200190565b60405180910390a350505050565b6001600160a01b0383166106f65780600260008282546106eb9190610955565b909155506107689050565b6001600160a01b038316600090815260208190526040902054818110156107495760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161045d565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610784576002805482900390556107a3565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107e891815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156108235760208186018101516040868401015201610806565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461085a57600080fd5b919050565b6000806040838503121561087257600080fd5b61087b83610843565b946020939093013593505050565b60008060006060848603121561089e57600080fd5b6108a784610843565b92506108b560208501610843565b929592945050506040919091013590565b6000602082840312156108d857600080fd5b6108e182610843565b9392505050565b600080604083850312156108fb57600080fd5b61090483610843565b915061091260208401610843565b90509250929050565b600181811c9082168061092f57607f821691505b60208210810361094f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561033c57634e487b7160e01b600052601160045260246000fdfea264697066735822122088fde28c6d49289b1f165a0e7d7f00e107c4b00b4c81cdb91b9d35a852f2c29364736f6c634300081b0033";

type SimpleERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleERC20__factory extends ContractFactory {
  constructor(...args: SimpleERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimal, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimal, overrides || {}) as Promise<
      SimpleERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleERC20__factory {
    return super.connect(runner) as SimpleERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleERC20Interface {
    return new Interface(_abi) as SimpleERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleERC20 {
    return new Contract(address, _abi, runner) as unknown as SimpleERC20;
  }
}
