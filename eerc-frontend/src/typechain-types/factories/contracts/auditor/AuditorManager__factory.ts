/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  AuditorManager,
  AuditorManagerInterface,
} from "../../../contracts/auditor/AuditorManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldAuditor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newAuditor",
        type: "address",
      },
    ],
    name: "AuditorChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "auditor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auditorPublicKey",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isAuditorKeySet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class AuditorManager__factory {
  static readonly abi = _abi;
  static createInterface(): AuditorManagerInterface {
    return new Interface(_abi) as AuditorManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AuditorManager {
    return new Contract(address, _abi, runner) as unknown as AuditorManager;
  }
}
