/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type EGCTStruct = { c1: PointStruct; c2: PointStruct };

export type EGCTStructOutput = [
  c1: PointStructOutput,
  c2: PointStructOutput
] & { c1: PointStructOutput; c2: PointStructOutput };

export type AmountPCTStruct = { pct: BigNumberish[]; index: BigNumberish };

export type AmountPCTStructOutput = [pct: bigint[], index: bigint] & {
  pct: bigint[];
  index: bigint;
};

export interface EncryptedUserBalancesInterface extends Interface {
  getFunction(
    nameOrSignature: "balanceOf" | "balanceOfStandalone" | "balances"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfStandalone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfStandalone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
}

export interface EncryptedUserBalances extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptedUserBalances;
  waitForDeployment(): Promise<this>;

  interface: EncryptedUserBalancesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  balanceOfStandalone: TypedContractMethod<
    [user: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  balances: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfStandalone"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
