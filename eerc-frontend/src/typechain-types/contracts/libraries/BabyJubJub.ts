/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type EGCTStruct = { c1: PointStruct; c2: PointStruct };

export type EGCTStructOutput = [
  c1: PointStructOutput,
  c2: PointStructOutput
] & { c1: PointStructOutput; c2: PointStructOutput };

export interface BabyJubJubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Q"
      | "_add"
      | "_sub"
      | "base8"
      | "elGamalEncryption"
      | "encrypt"
      | "scalarMultiply"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Q", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_add",
    values: [PointStruct, PointStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_sub",
    values: [PointStruct, PointStruct]
  ): string;
  encodeFunctionData(functionFragment: "base8", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "elGamalEncryption",
    values: [PointStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encrypt",
    values: [PointStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scalarMultiply",
    values: [PointStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Q", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "base8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "elGamalEncryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encrypt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scalarMultiply",
    data: BytesLike
  ): Result;
}

export interface BabyJubJub extends BaseContract {
  connect(runner?: ContractRunner | null): BabyJubJub;
  waitForDeployment(): Promise<this>;

  interface: BabyJubJubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Q: TypedContractMethod<[], [bigint], "view">;

  _add: TypedContractMethod<
    [_point1: PointStruct, _point2: PointStruct],
    [PointStructOutput],
    "view"
  >;

  _sub: TypedContractMethod<
    [_point1: PointStruct, _point2: PointStruct],
    [PointStructOutput],
    "view"
  >;

  base8: TypedContractMethod<[], [PointStructOutput], "view">;

  elGamalEncryption: TypedContractMethod<
    [_publicKey: PointStruct, _msg: BigNumberish],
    [EGCTStructOutput],
    "view"
  >;

  encrypt: TypedContractMethod<
    [_publicKey: PointStruct, _msg: BigNumberish],
    [EGCTStructOutput],
    "view"
  >;

  scalarMultiply: TypedContractMethod<
    [_point: PointStruct, _scalar: BigNumberish],
    [PointStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "Q"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_add"
  ): TypedContractMethod<
    [_point1: PointStruct, _point2: PointStruct],
    [PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "_sub"
  ): TypedContractMethod<
    [_point1: PointStruct, _point2: PointStruct],
    [PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "base8"
  ): TypedContractMethod<[], [PointStructOutput], "view">;
  getFunction(
    nameOrSignature: "elGamalEncryption"
  ): TypedContractMethod<
    [_publicKey: PointStruct, _msg: BigNumberish],
    [EGCTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "encrypt"
  ): TypedContractMethod<
    [_publicKey: PointStruct, _msg: BigNumberish],
    [EGCTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "scalarMultiply"
  ): TypedContractMethod<
    [_point: PointStruct, _scalar: BigNumberish],
    [PointStructOutput],
    "view"
  >;

  filters: {};
}
