/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CreateEncryptedERCParamsStruct = {
  registrar: AddressLike;
  isConverter: boolean;
  name: string;
  symbol: string;
  decimals: BigNumberish;
  mintVerifier: AddressLike;
  withdrawVerifier: AddressLike;
  transferVerifier: AddressLike;
  burnVerifier: AddressLike;
};

export type CreateEncryptedERCParamsStructOutput = [
  registrar: string,
  isConverter: boolean,
  name: string,
  symbol: string,
  decimals: bigint,
  mintVerifier: string,
  withdrawVerifier: string,
  transferVerifier: string,
  burnVerifier: string
] & {
  registrar: string;
  isConverter: boolean;
  name: string;
  symbol: string;
  decimals: bigint;
  mintVerifier: string;
  withdrawVerifier: string;
  transferVerifier: string;
  burnVerifier: string;
};

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type EGCTStruct = { c1: PointStruct; c2: PointStruct };

export type EGCTStructOutput = [
  c1: PointStructOutput,
  c2: PointStructOutput
] & { c1: PointStructOutput; c2: PointStructOutput };

export type AmountPCTStruct = { pct: BigNumberish[]; index: BigNumberish };

export type AmountPCTStructOutput = [pct: bigint[], index: bigint] & {
  pct: bigint[];
  index: bigint;
};

export type ProofPointsStruct = {
  a: [BigNumberish, BigNumberish];
  b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
  c: [BigNumberish, BigNumberish];
};

export type ProofPointsStructOutput = [
  a: [bigint, bigint],
  b: [[bigint, bigint], [bigint, bigint]],
  c: [bigint, bigint]
] & {
  a: [bigint, bigint];
  b: [[bigint, bigint], [bigint, bigint]];
  c: [bigint, bigint];
};

export type BurnProofStruct = {
  proofPoints: ProofPointsStruct;
  publicSignals: BigNumberish[];
};

export type BurnProofStructOutput = [
  proofPoints: ProofPointsStructOutput,
  publicSignals: bigint[]
] & { proofPoints: ProofPointsStructOutput; publicSignals: bigint[] };

export type MintProofStruct = {
  proofPoints: ProofPointsStruct;
  publicSignals: BigNumberish[];
};

export type MintProofStructOutput = [
  proofPoints: ProofPointsStructOutput,
  publicSignals: bigint[]
] & { proofPoints: ProofPointsStructOutput; publicSignals: bigint[] };

export type TransferProofStruct = {
  proofPoints: ProofPointsStruct;
  publicSignals: BigNumberish[];
};

export type TransferProofStructOutput = [
  proofPoints: ProofPointsStructOutput,
  publicSignals: bigint[]
] & { proofPoints: ProofPointsStructOutput; publicSignals: bigint[] };

export type WithdrawProofStruct = {
  proofPoints: ProofPointsStruct;
  publicSignals: BigNumberish[];
};

export type WithdrawProofStructOutput = [
  proofPoints: ProofPointsStructOutput,
  publicSignals: bigint[]
] & { proofPoints: ProofPointsStructOutput; publicSignals: bigint[] };

export interface EncryptedERCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "alreadyMinted"
      | "auditor"
      | "auditorPublicKey"
      | "balanceOf"
      | "balanceOfStandalone"
      | "balances"
      | "blacklistedTokens"
      | "burnVerifier"
      | "decimals"
      | "deposit"
      | "getBalanceFromTokenAddress"
      | "getTokens"
      | "isAuditorKeySet"
      | "isConverter"
      | "mintVerifier"
      | "name"
      | "nextTokenId"
      | "owner"
      | "pendingOwner"
      | "privateBurn"
      | "privateMint"
      | "registrar"
      | "renounceOwnership"
      | "setAuditorPublicKey"
      | "setTokenBlacklist"
      | "symbol"
      | "tokenAddresses"
      | "tokenIds"
      | "tokens"
      | "transfer"
      | "transferOwnership"
      | "transferVerifier"
      | "withdraw"
      | "withdrawVerifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuditorChanged"
      | "Deposit"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "PrivateBurn"
      | "PrivateMint"
      | "PrivateTransfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alreadyMinted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "auditor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auditorPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfStandalone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceFromTokenAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAuditorKeySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConverter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateBurn",
    values: [BurnProofStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "privateMint",
    values: [AddressLike, MintProofStruct]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuditorPublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, TransferProofStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, WithdrawProofStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVerifier",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alreadyMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditorPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfStandalone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceFromTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuditorKeySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuditorPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVerifier",
    data: BytesLike
  ): Result;
}

export namespace AuditorChangedEvent {
  export type InputTuple = [oldAuditor: AddressLike, newAuditor: AddressLike];
  export type OutputTuple = [oldAuditor: string, newAuditor: string];
  export interface OutputObject {
    oldAuditor: string;
    newAuditor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    dust: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    dust: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    dust: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrivateBurnEvent {
  export type InputTuple = [
    user: AddressLike,
    auditorPCT: BigNumberish[],
    auditorAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    auditorPCT: bigint[],
    auditorAddress: string
  ];
  export interface OutputObject {
    user: string;
    auditorPCT: bigint[];
    auditorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrivateMintEvent {
  export type InputTuple = [
    user: AddressLike,
    auditorPCT: BigNumberish[],
    auditorAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    auditorPCT: bigint[],
    auditorAddress: string
  ];
  export interface OutputObject {
    user: string;
    auditorPCT: bigint[];
    auditorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrivateTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    auditorPCT: BigNumberish[],
    auditorAddress: AddressLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    auditorPCT: bigint[],
    auditorAddress: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    auditorPCT: bigint[];
    auditorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    tokenId: BigNumberish,
    auditorPCT: BigNumberish[],
    auditorAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    tokenId: bigint,
    auditorPCT: bigint[],
    auditorAddress: string
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    tokenId: bigint;
    auditorPCT: bigint[];
    auditorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EncryptedERC extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptedERC;
  waitForDeployment(): Promise<this>;

  interface: EncryptedERCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  alreadyMinted: TypedContractMethod<
    [mintNullifier: BigNumberish],
    [boolean],
    "view"
  >;

  auditor: TypedContractMethod<[], [string], "view">;

  auditorPublicKey: TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  balanceOf: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  balanceOfStandalone: TypedContractMethod<
    [user: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  balances: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  blacklistedTokens: TypedContractMethod<
    [tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  burnVerifier: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      amount: BigNumberish,
      tokenAddress: AddressLike,
      amountPCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getBalanceFromTokenAddress: TypedContractMethod<
    [user: AddressLike, tokenAddress: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;

  getTokens: TypedContractMethod<[], [string[]], "view">;

  isAuditorKeySet: TypedContractMethod<[], [boolean], "view">;

  isConverter: TypedContractMethod<[], [boolean], "view">;

  mintVerifier: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  privateBurn: TypedContractMethod<
    [proof: BurnProofStruct, balancePCT: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  privateMint: TypedContractMethod<
    [user: AddressLike, proof: MintProofStruct],
    [void],
    "nonpayable"
  >;

  registrar: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuditorPublicKey: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenBlacklist: TypedContractMethod<
    [token: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenAddresses: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  tokenIds: TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transfer: TypedContractMethod<
    [
      to: AddressLike,
      tokenId: BigNumberish,
      proof: TransferProofStruct,
      balancePCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferVerifier: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      tokenId: BigNumberish,
      proof: WithdrawProofStruct,
      balancePCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  withdrawVerifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "alreadyMinted"
  ): TypedContractMethod<[mintNullifier: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "auditor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auditorPublicKey"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfStandalone"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [
      [EGCTStructOutput, bigint, bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "blacklistedTokens"
  ): TypedContractMethod<[tokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "burnVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      tokenAddress: AddressLike,
      amountPCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalanceFromTokenAddress"
  ): TypedContractMethod<
    [user: AddressLike, tokenAddress: AddressLike],
    [
      [EGCTStructOutput, bigint, AmountPCTStructOutput[], bigint[], bigint] & {
        eGCT: EGCTStructOutput;
        nonce: bigint;
        amountPCTs: AmountPCTStructOutput[];
        balancePCT: bigint[];
        transactionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAuditorKeySet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isConverter"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "privateBurn"
  ): TypedContractMethod<
    [proof: BurnProofStruct, balancePCT: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "privateMint"
  ): TypedContractMethod<
    [user: AddressLike, proof: MintProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registrar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuditorPublicKey"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenBlacklist"
  ): TypedContractMethod<
    [token: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddresses"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenIds"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      to: AddressLike,
      tokenId: BigNumberish,
      proof: TransferProofStruct,
      balancePCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      proof: WithdrawProofStruct,
      balancePCT: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawVerifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuditorChanged"
  ): TypedContractEvent<
    AuditorChangedEvent.InputTuple,
    AuditorChangedEvent.OutputTuple,
    AuditorChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrivateBurn"
  ): TypedContractEvent<
    PrivateBurnEvent.InputTuple,
    PrivateBurnEvent.OutputTuple,
    PrivateBurnEvent.OutputObject
  >;
  getEvent(
    key: "PrivateMint"
  ): TypedContractEvent<
    PrivateMintEvent.InputTuple,
    PrivateMintEvent.OutputTuple,
    PrivateMintEvent.OutputObject
  >;
  getEvent(
    key: "PrivateTransfer"
  ): TypedContractEvent<
    PrivateTransferEvent.InputTuple,
    PrivateTransferEvent.OutputTuple,
    PrivateTransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AuditorChanged(address,address)": TypedContractEvent<
      AuditorChangedEvent.InputTuple,
      AuditorChangedEvent.OutputTuple,
      AuditorChangedEvent.OutputObject
    >;
    AuditorChanged: TypedContractEvent<
      AuditorChangedEvent.InputTuple,
      AuditorChangedEvent.OutputTuple,
      AuditorChangedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrivateBurn(address,uint256[7],address)": TypedContractEvent<
      PrivateBurnEvent.InputTuple,
      PrivateBurnEvent.OutputTuple,
      PrivateBurnEvent.OutputObject
    >;
    PrivateBurn: TypedContractEvent<
      PrivateBurnEvent.InputTuple,
      PrivateBurnEvent.OutputTuple,
      PrivateBurnEvent.OutputObject
    >;

    "PrivateMint(address,uint256[7],address)": TypedContractEvent<
      PrivateMintEvent.InputTuple,
      PrivateMintEvent.OutputTuple,
      PrivateMintEvent.OutputObject
    >;
    PrivateMint: TypedContractEvent<
      PrivateMintEvent.InputTuple,
      PrivateMintEvent.OutputTuple,
      PrivateMintEvent.OutputObject
    >;

    "PrivateTransfer(address,address,uint256[7],address)": TypedContractEvent<
      PrivateTransferEvent.InputTuple,
      PrivateTransferEvent.OutputTuple,
      PrivateTransferEvent.OutputObject
    >;
    PrivateTransfer: TypedContractEvent<
      PrivateTransferEvent.InputTuple,
      PrivateTransferEvent.OutputTuple,
      PrivateTransferEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,uint256[7],address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
