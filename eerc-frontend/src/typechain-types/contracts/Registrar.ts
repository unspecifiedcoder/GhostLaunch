/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type ProofPointsStruct = {
  a: [BigNumberish, BigNumberish];
  b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
  c: [BigNumberish, BigNumberish];
};

export type ProofPointsStructOutput = [
  a: [bigint, bigint],
  b: [[bigint, bigint], [bigint, bigint]],
  c: [bigint, bigint]
] & {
  a: [bigint, bigint];
  b: [[bigint, bigint], [bigint, bigint]];
  c: [bigint, bigint];
};

export type RegisterProofStruct = {
  proofPoints: ProofPointsStruct;
  publicSignals: [
    BigNumberish,
    BigNumberish,
    BigNumberish,
    BigNumberish,
    BigNumberish
  ];
};

export type RegisterProofStructOutput = [
  proofPoints: ProofPointsStructOutput,
  publicSignals: [bigint, bigint, bigint, bigint, bigint]
] & {
  proofPoints: ProofPointsStructOutput;
  publicSignals: [bigint, bigint, bigint, bigint, bigint];
};

export interface RegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getUserPublicKey"
      | "isRegistered"
      | "isUserRegistered"
      | "register"
      | "registrationVerifier"
      | "userPublicKeys"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;

  encodeFunctionData(
    functionFragment: "getUserPublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [RegisterProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPublicKeys",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUserPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrationVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPublicKeys",
    data: BytesLike
  ): Result;
}

export namespace RegisterEvent {
  export type InputTuple = [user: AddressLike, publicKey: PointStruct];
  export type OutputTuple = [user: string, publicKey: PointStructOutput];
  export interface OutputObject {
    user: string;
    publicKey: PointStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registrar extends BaseContract {
  connect(runner?: ContractRunner | null): Registrar;
  waitForDeployment(): Promise<this>;

  interface: RegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUserPublicKey: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  isRegistered: TypedContractMethod<
    [registrationHash: BigNumberish],
    [boolean],
    "view"
  >;

  isUserRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  register: TypedContractMethod<
    [proof: RegisterProofStruct],
    [void],
    "nonpayable"
  >;

  registrationVerifier: TypedContractMethod<[], [string], "view">;

  userPublicKeys: TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUserPublicKey"
  ): TypedContractMethod<[user: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[registrationHash: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[proof: RegisterProofStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registrationVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userPublicKeys"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  getEvent(
    key: "Register"
  ): TypedContractEvent<
    RegisterEvent.InputTuple,
    RegisterEvent.OutputTuple,
    RegisterEvent.OutputObject
  >;

  filters: {
    "Register(address,tuple)": TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;
    Register: TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;
  };
}
