/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AuditorManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "auditor" | "auditorPublicKey" | "isAuditorKeySet"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AuditorChanged"): EventFragment;

  encodeFunctionData(functionFragment: "auditor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auditorPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuditorKeySet",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditorPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuditorKeySet",
    data: BytesLike
  ): Result;
}

export namespace AuditorChangedEvent {
  export type InputTuple = [oldAuditor: AddressLike, newAuditor: AddressLike];
  export type OutputTuple = [oldAuditor: string, newAuditor: string];
  export interface OutputObject {
    oldAuditor: string;
    newAuditor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuditorManager extends BaseContract {
  connect(runner?: ContractRunner | null): AuditorManager;
  waitForDeployment(): Promise<this>;

  interface: AuditorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auditor: TypedContractMethod<[], [string], "view">;

  auditorPublicKey: TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  isAuditorKeySet: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auditor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auditorPublicKey"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuditorKeySet"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AuditorChanged"
  ): TypedContractEvent<
    AuditorChangedEvent.InputTuple,
    AuditorChangedEvent.OutputTuple,
    AuditorChangedEvent.OutputObject
  >;

  filters: {
    "AuditorChanged(address,address)": TypedContractEvent<
      AuditorChangedEvent.InputTuple,
      AuditorChangedEvent.OutputTuple,
      AuditorChangedEvent.OutputObject
    >;
    AuditorChanged: TypedContractEvent<
      AuditorChangedEvent.InputTuple,
      AuditorChangedEvent.OutputTuple,
      AuditorChangedEvent.OutputObject
    >;
  };
}
