/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistrationCircuitGroth16VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALPHA_X"
      | "ALPHA_Y"
      | "BASE_FIELD_SIZE"
      | "BETA_X1"
      | "BETA_X2"
      | "BETA_Y1"
      | "BETA_Y2"
      | "DELTA_X1"
      | "DELTA_X2"
      | "DELTA_Y1"
      | "DELTA_Y2"
      | "GAMMA_X1"
      | "GAMMA_X2"
      | "GAMMA_Y1"
      | "GAMMA_Y2"
      | "IC0_X"
      | "IC0_Y"
      | "IC1_X"
      | "IC1_Y"
      | "IC2_X"
      | "IC2_Y"
      | "IC3_X"
      | "IC3_Y"
      | "IC4_X"
      | "IC4_Y"
      | "IC5_X"
      | "IC5_Y"
      | "P_TOTAL_SIZE"
      | "SCALAR_FIELD_SIZE"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ALPHA_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "ALPHA_Y", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BASE_FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BETA_X1", values?: undefined): string;
  encodeFunctionData(functionFragment: "BETA_X2", values?: undefined): string;
  encodeFunctionData(functionFragment: "BETA_Y1", values?: undefined): string;
  encodeFunctionData(functionFragment: "BETA_Y2", values?: undefined): string;
  encodeFunctionData(functionFragment: "DELTA_X1", values?: undefined): string;
  encodeFunctionData(functionFragment: "DELTA_X2", values?: undefined): string;
  encodeFunctionData(functionFragment: "DELTA_Y1", values?: undefined): string;
  encodeFunctionData(functionFragment: "DELTA_Y2", values?: undefined): string;
  encodeFunctionData(functionFragment: "GAMMA_X1", values?: undefined): string;
  encodeFunctionData(functionFragment: "GAMMA_X2", values?: undefined): string;
  encodeFunctionData(functionFragment: "GAMMA_Y1", values?: undefined): string;
  encodeFunctionData(functionFragment: "GAMMA_Y2", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC0_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC0_Y", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC1_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC1_Y", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC2_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC2_Y", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC3_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC3_Y", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC4_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC4_Y", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC5_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "IC5_Y", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "P_TOTAL_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCALAR_FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ALPHA_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ALPHA_Y", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASE_FIELD_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BETA_X1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BETA_X2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BETA_Y1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BETA_Y2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DELTA_X1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DELTA_X2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DELTA_Y1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DELTA_Y2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GAMMA_X1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GAMMA_X2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GAMMA_Y1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GAMMA_Y2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC0_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC0_Y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC1_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC1_Y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC2_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC2_Y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC3_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC3_Y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC4_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC4_Y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC5_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IC5_Y", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "P_TOTAL_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCALAR_FIELD_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export interface RegistrationCircuitGroth16Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): RegistrationCircuitGroth16Verifier;
  waitForDeployment(): Promise<this>;

  interface: RegistrationCircuitGroth16VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALPHA_X: TypedContractMethod<[], [bigint], "view">;

  ALPHA_Y: TypedContractMethod<[], [bigint], "view">;

  BASE_FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  BETA_X1: TypedContractMethod<[], [bigint], "view">;

  BETA_X2: TypedContractMethod<[], [bigint], "view">;

  BETA_Y1: TypedContractMethod<[], [bigint], "view">;

  BETA_Y2: TypedContractMethod<[], [bigint], "view">;

  DELTA_X1: TypedContractMethod<[], [bigint], "view">;

  DELTA_X2: TypedContractMethod<[], [bigint], "view">;

  DELTA_Y1: TypedContractMethod<[], [bigint], "view">;

  DELTA_Y2: TypedContractMethod<[], [bigint], "view">;

  GAMMA_X1: TypedContractMethod<[], [bigint], "view">;

  GAMMA_X2: TypedContractMethod<[], [bigint], "view">;

  GAMMA_Y1: TypedContractMethod<[], [bigint], "view">;

  GAMMA_Y2: TypedContractMethod<[], [bigint], "view">;

  IC0_X: TypedContractMethod<[], [bigint], "view">;

  IC0_Y: TypedContractMethod<[], [bigint], "view">;

  IC1_X: TypedContractMethod<[], [bigint], "view">;

  IC1_Y: TypedContractMethod<[], [bigint], "view">;

  IC2_X: TypedContractMethod<[], [bigint], "view">;

  IC2_Y: TypedContractMethod<[], [bigint], "view">;

  IC3_X: TypedContractMethod<[], [bigint], "view">;

  IC3_Y: TypedContractMethod<[], [bigint], "view">;

  IC4_X: TypedContractMethod<[], [bigint], "view">;

  IC4_Y: TypedContractMethod<[], [bigint], "view">;

  IC5_X: TypedContractMethod<[], [bigint], "view">;

  IC5_Y: TypedContractMethod<[], [bigint], "view">;

  P_TOTAL_SIZE: TypedContractMethod<[], [bigint], "view">;

  SCALAR_FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  verifyProof: TypedContractMethod<
    [
      pointA_: [BigNumberish, BigNumberish],
      pointB_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pointC_: [BigNumberish, BigNumberish],
      publicSignals_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALPHA_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ALPHA_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BETA_X1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BETA_X2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BETA_Y1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BETA_Y2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DELTA_X1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DELTA_X2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DELTA_Y1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DELTA_Y2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAMMA_X1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAMMA_X2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAMMA_Y1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAMMA_Y2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC0_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC0_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC1_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC1_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC2_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC2_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC3_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC3_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC4_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC4_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC5_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IC5_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "P_TOTAL_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SCALAR_FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      pointA_: [BigNumberish, BigNumberish],
      pointB_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pointC_: [BigNumberish, BigNumberish],
      publicSignals_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
