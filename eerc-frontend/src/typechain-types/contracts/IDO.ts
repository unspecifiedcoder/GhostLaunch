/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IDOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimed"
      | "depositProjectTokens"
      | "endTime"
      | "finalize"
      | "finalized"
      | "merkleRoot"
      | "owner"
      | "projectToken"
      | "remaining"
      | "setMerkleRoot"
      | "startTime"
      | "vaultEOA"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "Finalized"
      | "ProjectTokensDeposited"
      | "RootUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProjectTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remaining",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultEOA", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositProjectTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultEOA", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectTokensDepositedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootUpdatedEvent {
  export type InputTuple = [root: BytesLike];
  export type OutputTuple = [root: string];
  export interface OutputObject {
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDO extends BaseContract {
  connect(runner?: ContractRunner | null): IDO;
  waitForDeployment(): Promise<this>;

  interface: IDOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [account: AddressLike, allocation: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  depositProjectTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  endTime: TypedContractMethod<[], [bigint], "view">;

  finalize: TypedContractMethod<[], [void], "nonpayable">;

  finalized: TypedContractMethod<[], [boolean], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  projectToken: TypedContractMethod<[], [string], "view">;

  remaining: TypedContractMethod<
    [account: AddressLike, allocation: BigNumberish],
    [bigint],
    "view"
  >;

  setMerkleRoot: TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  startTime: TypedContractMethod<[], [bigint], "view">;

  vaultEOA: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [account: AddressLike, allocation: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositProjectTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remaining"
  ): TypedContractMethod<
    [account: AddressLike, allocation: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMerkleRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultEOA"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectTokensDeposited"
  ): TypedContractEvent<
    ProjectTokensDepositedEvent.InputTuple,
    ProjectTokensDepositedEvent.OutputTuple,
    ProjectTokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "RootUpdated"
  ): TypedContractEvent<
    RootUpdatedEvent.InputTuple,
    RootUpdatedEvent.OutputTuple,
    RootUpdatedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Finalized()": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "ProjectTokensDeposited(address,uint256)": TypedContractEvent<
      ProjectTokensDepositedEvent.InputTuple,
      ProjectTokensDepositedEvent.OutputTuple,
      ProjectTokensDepositedEvent.OutputObject
    >;
    ProjectTokensDeposited: TypedContractEvent<
      ProjectTokensDepositedEvent.InputTuple,
      ProjectTokensDepositedEvent.OutputTuple,
      ProjectTokensDepositedEvent.OutputObject
    >;

    "RootUpdated(bytes32)": TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;
    RootUpdated: TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;
  };
}
